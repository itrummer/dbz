{
	"test_access":{
		"data_dir":"tpch_sf001", "python":"python"},
	"sql_ref":{
		"pg_db":"tpch_sf001", "pg_user":"ubuntu", "pg_pwd":"", 
		"host":"/var/run/postgresql"},
	"checks":{
		"queries":[
			"select l_returnflag, l_linestatus, sum(l_quantity) as sum_qty, sum(l_extendedprice) as sum_base_price, sum(l_extendedprice * (1 - l_discount)) as sum_disc_price, sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge, avg(l_quantity) as avg_qty, avg(l_extendedprice) as avg_price, avg(l_discount) as avg_disc, count(*) as count_order from lineitem where l_shipdate <= date '1998-12-01' - interval '90' day group by l_returnflag, l_linestatus order by l_returnflag, l_linestatus",
			"select s_acctbal, s_name, n_name, p_partkey, p_mfgr, s_address, s_phone, s_comment from part, supplier, partsupp, nation, region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and p_size = 15 and p_type like '%BRASS' and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'EUROPE' and ps_supplycost = ( select min(ps_supplycost) from partsupp, supplier, nation, region where p_partkey = ps_partkey and s_suppkey = ps_suppkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'EUROPE' ) order by s_acctbal desc, n_name, s_name, p_partkey",
			"select l_orderkey, sum(l_extendedprice * (1 - l_discount)) as revenue, o_orderdate,  o_shippriority from customer, orders, lineitem where c_mktsegment = 'BUILDING' and c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate < date '1995-03-15' and l_shipdate > date '1995-03-15' group by l_orderkey, o_orderdate, o_shippriority order by revenue desc, o_orderdate",
			"select o_orderpriority, count(*) as order_count from orders where o_orderdate >= date '1993-07-01' and o_orderdate < date '1993-07-01' + interval '3' month and exists ( select * from lineitem where l_orderkey = o_orderkey and l_commitdate < l_receiptdate ) group by o_orderpriority order by o_orderpriority",
			"select n_name, sum(l_extendedprice * (1 - l_discount)) as revenue from customer, orders, lineitem, supplier, nation, region where c_custkey = o_custkey and l_orderkey = o_orderkey and l_suppkey = s_suppkey and c_nationkey = s_nationkey and s_nationkey = n_nationkey and n_regionkey = r_regionkey and r_name = 'ASIA' and o_orderdate >= date '1994-01-01' and o_orderdate < date '1994-01-01' + interval '1' year group by n_name order by revenue desc",
			"select sum(l_extendedprice * l_discount) as revenue from lineitem where l_shipdate >= date '1994-01-01' and l_shipdate < date '1995-1-1' and l_discount between .06 - 0.01 and .06 + 0.01 and l_quantity < 24",
			"select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where o_orderkey in ( select l_orderkey from lineitem group by l_orderkey having sum(l_quantity) > 300 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate",
			"select supp_nation, cust_nation, l_year, sum(volume) as revenue from ( select n1.n_name as supp_nation, n2.n_name as cust_nation, extract(year from l_shipdate) as l_year, l_extendedprice * (1 - l_discount) as volume from supplier, lineitem, orders, customer, nation n1, nation n2 where s_suppkey = l_suppkey and o_orderkey = l_orderkey and c_custkey = o_custkey and s_nationkey = n1.n_nationkey and c_nationkey = n2.n_nationkey and ( (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY') or (n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE') ) and l_shipdate between date '1995-01-01' and date '1996-12-31' ) as shipping group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year",
			"select o_year, sum(case when nation = 'BRAZIL' then volume else 0 end) / sum(volume) as mkt_share from ( select extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation from part, supplier, lineitem, orders, customer, nation n1, nation n2, region where p_partkey = l_partkey and s_suppkey = l_suppkey and l_orderkey = o_orderkey and o_custkey = c_custkey and c_nationkey = n1.n_nationkey and n1.n_regionkey = r_regionkey and r_name = 'AMERICA' and s_nationkey = n2.n_nationkey and o_orderdate between date '1995-01-01' and date '1996-12-31' and p_type = 'ECONOMY ANODIZED STEEL' ) as all_nations group by o_year order by o_year",
			"select nation, o_year, sum(amount) as sum_profit from ( select n_name as nation, extract(year from o_orderdate) as o_year, l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount from part, supplier, lineitem, partsupp, orders, nation where s_suppkey = l_suppkey and ps_suppkey = l_suppkey and ps_partkey = l_partkey and p_partkey = l_partkey and o_orderkey = l_orderkey and s_nationkey = n_nationkey and p_name like '%green%' ) as profit group by nation, o_year order by nation, o_year desc",
			"select c_custkey, c_name, sum(l_extendedprice * (1 - l_discount)) as revenue, c_acctbal, n_name, c_address, c_phone, c_comment from customer, orders, lineitem, nation where c_custkey = o_custkey and l_orderkey = o_orderkey and o_orderdate >= date '1993-10-01' and o_orderdate < date '1993-10-01' + interval '3' month and l_returnflag = 'R' and c_nationkey = n_nationkey group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment order by revenue desc",
			"select ps_partkey, sum(ps_supplycost * ps_availqty) as value_ from partsupp, supplier, nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'GERMANY' group by ps_partkey having sum(ps_supplycost * ps_availqty) > ( select sum(ps_supplycost * ps_availqty) * 0.0001000000 from partsupp, supplier, nation where ps_suppkey = s_suppkey and s_nationkey = n_nationkey and n_name = 'GERMANY' ) order by value_ desc",
			"select l_shipmode, sum(case when o_orderpriority = '1-URGENT' or o_orderpriority = '2-HIGH' then 1 else 0 end) as high_line_count, sum(case when o_orderpriority <> '1-URGENT' and o_orderpriority <> '2-HIGH' then 1 else 0 end) as low_line_count from orders, lineitem where o_orderkey = l_orderkey and l_shipmode in ('MAIL', 'SHIP') and l_commitdate < l_receiptdate and l_shipdate < l_commitdate and l_receiptdate >= date '1994-01-01' and l_receiptdate < date '1994-01-01' + interval '1' year group by l_shipmode order by l_shipmode",
			"select c_count, count(*) as custdist from ( select c_custkey, count(o_orderkey) from customer left outer join orders on c_custkey = o_custkey and o_comment not like '%special%requests%' group by c_custkey ) as c_orders (c_custkey, c_count) group by c_count order by custdist desc, c_count desc",
			"select 100.00 * sum(case when p_type like 'PROMO%' then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue from lineitem, part where l_partkey = p_partkey and l_shipdate >= date '1995-09-01' and l_shipdate < date '1995-09-01' + interval '1' month",
			"select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt from partsupp, part where p_partkey = ps_partkey and p_brand <> 'Brand#45' and p_type not like 'MEDIUM POLISHED%' and p_size in (49, 14, 23, 45, 19, 3, 36, 9) and ps_suppkey not in ( select s_suppkey from supplier where s_comment like '%Customer%Complaints%' ) group by p_brand, p_type, p_size order by supplier_cnt desc, p_brand, p_type, p_size",
			"select sum(l_extendedprice) / 7.0 as avg_yearly from lineitem, part where p_partkey = l_partkey and p_brand = 'Brand#23' and p_container = 'MED BOX' and l_quantity < ( select 0.2 * avg(l_quantity) from lineitem where l_partkey = p_partkey )",
			"select c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity) from customer, orders, lineitem where o_orderkey in ( select l_orderkey from lineitem group by l_orderkey having sum(l_quantity) > 300 ) and c_custkey = o_custkey and o_orderkey = l_orderkey group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice order by o_totalprice desc, o_orderdate",
			"select sum(l_extendedprice* (1 - l_discount)) as revenue from lineitem, part where ( p_partkey = l_partkey and p_brand = 'Brand#12' and p_container in ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG') and l_quantity >= 1 and l_quantity <= 1 + 10 and p_size between 1 and 5 and l_shipmode in ('AIR', 'AIR REG') and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#23' and p_container in ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK') and l_quantity >= 10 and l_quantity <= 10 + 10 and p_size between 1 and 10 and l_shipmode in ('AIR', 'AIR REG') and l_shipinstruct = 'DELIVER IN PERSON' ) or ( p_partkey = l_partkey and p_brand = 'Brand#34' and p_container in ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG') and l_quantity >= 20 and l_quantity <= 20 + 10 and p_size between 1 and 15 and l_shipmode in ('AIR', 'AIR REG') and l_shipinstruct = 'DELIVER IN PERSON' )",
			"select s_name, s_address from supplier, nation where s_suppkey in ( select ps_suppkey from partsupp where ps_partkey in ( select p_partkey from part where p_name like 'forest%' ) and ps_availqty > ( select 0.5 * sum(l_quantity) from lineitem where l_partkey = ps_partkey and l_suppkey = ps_suppkey and l_shipdate >= date '1994-01-01' and l_shipdate < date '1994-01-01' + interval '1' year ) ) and s_nationkey = n_nationkey and n_name = 'CANADA' order by s_name",
			"select s_name, count(*) as numwait from supplier, lineitem l1, orders, nation where s_suppkey = l1.l_suppkey and o_orderkey = l1.l_orderkey and o_orderstatus = 'F' and l1.l_receiptdate > l1.l_commitdate and exists ( select * from lineitem l2 where l2.l_orderkey = l1.l_orderkey and l2.l_suppkey <> l1.l_suppkey ) and not exists ( select * from lineitem l3 where l3.l_orderkey = l1.l_orderkey and l3.l_suppkey <> l1.l_suppkey and l3.l_receiptdate > l3.l_commitdate ) and s_nationkey = n_nationkey and n_name = 'SAUDI ARABIA' group by s_name order by numwait desc, s_name",
			"select cntrycode, count(*) as numcust, sum(c_acctbal) as totacctbal from ( select substring(c_phone from 1 for 2) as cntrycode, c_acctbal from customer where substring(c_phone from 1 for 2) in ('13', '31', '23', '29', '30', '18', '17') and c_acctbal > ( select avg(c_acctbal) from customer where c_acctbal > 0.00 and substring(c_phone from 1 for 2) in ('13', '31', '23', '29', '30', '18', '17') ) and not exists ( select * from orders where o_custkey = c_custkey ) ) as custsale group by cntrycode order by cntrycode",
			"select * from (values (1,2), (2,3)) as t",
			"select * from lineitem",
			"select l_shipinstruct like '%BACK%' from lineitem",
			"select cast(l_extendedprice as int) from lineitem",
			"select count(*) from lineitem",
			"select cast(l_orderkey as int) from lineitem",
			"select cast(l_extendedprice as float) from lineitem",
			"select cast(l_extendedprice as varchar(100)) from lineitem",
			"select l_extendedprice is null from lineitem", "select null is null",
			"select n_nationkey from nation order by n_nationkey",
			"select n_nationkey from nation order by n_nationkey DESC",
			"select n_nationkey from nation order by n_nationkey DESC limit 10",
			"select l_orderkey, l_linenumber from lineitem order by l_orderkey, l_linenumber DESC limit 5",
			"select l_extendedprice + 0.1 from lineitem",
			"select l_extendedprice * 10 from lineitem",
			"select l_extendedprice + NULL from lineitem",
			"select substring(l_comment, 1, 3) from lineitem",
			"select l_extendedprice - 0.1 from lineitem",
			"select l_extendedprice / 0.1 from lineitem",
			"select r_comment from region where r_comment = NULL",
			"select r_comment from region where r_comment <> NULL",
			"select r_comment is null from region",
			"select r_comment from region where r_comment is null",
			"select r_comment from region where r_comment is not null",
			"select * from lineitem where l_extendedprice < 13309.60",
			"select * from lineitem where l_extendedprice > 13309.60",
			"select * from lineitem where l_extendedprice = 13309.60",
			"select * from lineitem where l_extendedprice <> 13309.60",
			"select * from lineitem where l_extendedprice <= 13309.60",
			"select * from lineitem where l_extendedprice >= 13309.60",
			"select * from lineitem where l_extendedprice < 14000 and l_extendedprice > 12000 and l_extendedprice > 13000",
			"select * from lineitem where l_extendedprice < 14000 or l_extendedprice > 12000 or l_extendedprice < 13000",
			"select * from lineitem where not (l_extendedprice < 13000)",
			"select l_extendedprice is null from lineitem",
			"select null is true", 
			"select null is false", 
			"select null is null", 
			"select null is not true", 
			"select null is not false", 
			"select null is not null",
			"select case when n_comment like '%carefully%' then NULL else 0 end + 1 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end - 2 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end * 2 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end / 2 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end > -1 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end >= 0 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end < 1 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end <= 1 from nation",
			"select case when n_comment like '%carefully%' then NULL else 0 end = 0 from nation",
			"select case when o_orderdate < date '1993-1-1' then NULL else o_orderdate end from orders",
			"select sum(l_extendedprice) from lineitem",
			"select min(l_extendedprice) from lineitem",
			"select max(l_extendedprice) from lineitem",
			"select avg(l_extendedprice) from lineitem",
			"select count(l_shipmode) from lineitem",
			"select count(distinct l_shipmode) from lineitem",
			"select n_nationkey from nation where n_nationkey > 5",
			"select case when l_extendedprice < 25000 then 1 else 0 end from lineitem",
			"select case when l_extendedprice < 25000 then 1 else 0 end from lineitem",
			"select sum(1) from lineitem group by l_shipdate",
			"select sum(l_extendedprice) from lineitem group by l_shipmode",
			"select min(l_extendedprice) from lineitem group by l_shipmode",
			"select max(l_extendedprice) from lineitem group by l_shipmode",
			"select avg(l_extendedprice) from lineitem group by l_shipmode",
			"select count(*) from lineitem group by l_shipmode",
			"select * from customer, orders where c_custkey = o_custkey",
			"select * from customer left join orders on c_custkey = o_custkey",
			"select * from customer right join orders on c_custkey = o_custkey",
			"select * from customer right join orders on c_custkey = o_custkey"],
		"test_dirs":[
			"src/dbz/tests"
		]
	},
	"tasks":[
	{"type":"generate", "task_id":"column_type_test", "context":[],
		"template":"column_type_test.py", "substitutions":{}},
	{"type":"generate", "task_id":"table_type_test", "context":[],
		"template":"table_type_test.py", "substitutions":{}},
	{"type":"generate", "task_id":"get_null", "context":[],
		"template":"get_null.py", "substitutions":{}},
	{"type":"generate", "task_id":"get", "context":[],
		"template":"get_value.py", "substitutions":{}},
		
	{"type":"generate", "task_id":"fill_int_column", "context":[],
		"template":"fill_int_column.py", "substitutions":{}},
	{"type":"generate", "task_id":"fill_float_column", "context":["fill_int_column"],
		"template":"fill_float_column.py", "substitutions":{}},
	{"type":"generate", "task_id":"fill_bool_column", "context":["fill_int_column"],
		"template":"fill_Boolean_column.py", "substitutions":{}},
	{"type":"generate", "task_id":"fill_string_column", "context":["fill_int_column"],
		"template":"fill_string_column.py", "substitutions":{}},
	{"type":"generate", "task_id":"floor", "context":[], 
		"template":"floor.py", "substitutions":{}},

	{"type":"generate", "task_id":"is_empty", "context":[], 
		"template":"is_empty.py", "substitutions":{}},		
	{"type":"generate", "task_id":"add_column", "context":[],
		"template":"add_column.py", "substitutions":{}},
	{"type":"generate", "task_id":"get_column", "context":[],
		"template":"get_column.py", "substitutions":{}},
	{"type":"generate", "task_id":"set_column", "context":[],
		"template":"set_column.py", "substitutions":{}},

	{"type":"generate", "task_id":"nr_rows", "context":[],
		"template":"nr_rows.py", "substitutions":{}},
	{"type":"generate", "task_id":"is_null", "context":[],
		"template":"is_null.py", "substitutions":{}},
	{"type":"generate", "task_id":"multiplication", "context":["floor"],
		"template":"binary_expression.py", 
		"substitutions":{"<binary_op>":"multiplication"}},

	{"type":"generate", "task_id":"map", "context":[],
		"template":"map.py", "substitutions":{}},
	{"type":"generate", "task_id":"to_int", "context":[],
		"template":"cast_to_int.py", "substitutions":{}},
	{"type":"generate", "task_id":"to_float", "context":[],
		"template":"cast_to_float.py", "substitutions":{}},
	{"type":"generate", "task_id":"to_string", "context":[],
		"template":"cast_to_string.py", "substitutions":{}},
	{"type":"generate", "task_id":"to_bool", "context":[],
		"template":"cast_to_Boolean.py", "substitutions":{}},
	
	{"type":"generate", "task_id":"sort", "context":[], 
		"template":"sort.py", "substitutions":{}},
	{"type":"generate", "task_id":"first_rows", "context":[],
		"template":"first_rows.py", "substitutions":{}},
	
	{"type":"generate", "task_id":"substring", "context":[],
		"template":"substring.py", "substitutions":{}},
	{"type":"generate", "task_id":"addition", "context":["multiplication"],
		"template":"binary_expression.py", "substitutions":{"<binary_op>":"addition"}},
	{"type":"generate", "task_id":"subtraction", "context":["multiplication"],
		"template":"binary_expression.py", "substitutions":{"<binary_op>":"subtraction"}},
	{"type":"generate", "task_id":"division", "context":["multiplication"],
		"template":"binary_expression.py", "substitutions":{"<binary_op>":"division"}},
	
	{"type":"generate", "task_id":"filter", "context":[],
		"template":"filter.py", "substitutions":{}},
	{"type":"generate", "task_id":"less_than", "context":[],
		"template":"binary_cmp.py", 
		"substitutions":{"<binary_op>":"less_than", "<short_op>":"<"}},
	{"type":"generate", "task_id":"greater_than", "context":["less_than"],
		"template":"binary_cmp.py", 
		"substitutions":{"<binary_op>":"greater_than", "<short_op>":">"}},
	{"type":"generate", "task_id":"equal_to", "context":["less_than"],
		"template":"binary_cmp.py", 
		"substitutions":{"<binary_op>":"equal", "<short_op>":"="}},
	{"type":"generate", "task_id":"not_equal_to", "context":["less_than"],
		"template":"binary_cmp.py", 
		"substitutions":{"<binary_op>":"not_equal", "<short_op>":"<>"}},
	{"type":"generate", "task_id":"less_than_or_equal", "context":["less_than"],
		"template":"binary_cmp.py", 
		"substitutions":{"<binary_op>":"less_than_or_equal", "<short_op>":"<="}},
	{"type":"generate", "task_id":"greater_than_or_equal", "context":["less_than"],
		"template":"binary_cmp.py", 
		"substitutions":{"<binary_op>":"greater_than_or_equal", "<short_op>":">="}},

	{"type":"generate", "task_id":"and", "context":[], 
		"template":"boolean_compound.py", 
		"substitutions":{"<operator>":"and"}},
	{"type":"generate", "task_id":"or", "context":["and"], 
		"template":"boolean_compound.py", 
		"substitutions":{"<operator>":"or"}},
	{"type":"generate", "task_id":"not", "context":["and"], 
		"template":"not.py", "substitutions":{}},
	
	{"type":"generate", "task_id":"sum", "context":[], 
		"template":"aggregate.py", "substitutions":{"<aggregate>":"sum"}},
	{"type":"generate", "task_id":"min", "context":["sum"], 
		"template":"aggregate.py", "substitutions":{"<aggregate>":"min"}},
	{"type":"generate", "task_id":"max", "context":["sum"], 
		"template":"aggregate.py", "substitutions":{"<aggregate>":"max"}},
	{"type":"generate", "task_id":"avg", "context":["sum"], 
		"template":"aggregate.py", "substitutions":{"<aggregate>":"avg"}},
	{"type":"generate", "task_id":"count_distinct", "context":["sum"], 
		"template":"count_distinct.py", "substitutions":{}},
	{"type":"generate", "task_id":"case", "context":["and"],
		"template":"case.py", "substitutions":{}},

	{"type":"generate", "task_id":"grouped_sum", "context":[], 
		"template":"grouped_aggregate.py", "substitutions":{"<aggregate>":"sum"}},	
	{"type":"generate", "task_id":"grouped_min", "context":["grouped_sum"], 
		"template":"grouped_aggregate.py", "substitutions":{"<aggregate>":"min"}},	
	{"type":"generate", "task_id":"grouped_max", "context":["grouped_sum"], 
		"template":"grouped_aggregate.py", "substitutions":{"<aggregate>":"max"}},
	{"type":"generate", "task_id":"grouped_avg", "context":["grouped_sum"], 
		"template":"grouped_aggregate.py", "substitutions":{"<aggregate>":"avg"}},
	
	{"type":"generate", "task_id":"equi_join", "context":[],
		"template":"inner_join.py", "substitutions":{}},
	{"type":"generate", "task_id":"cross_product", "context":[],
		"template":"cross_product.py", "substitutions":{}},
	{"type":"generate", "task_id":"left_join", "context":[], 
		"template":"left_join.py", "substitutions":{}},
	{"type":"generate", "task_id":"right_join", "context":[], 
		"template":"right_join.py", "substitutions":{}}
	]
}